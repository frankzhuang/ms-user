plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '5.0.13'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.frank.user'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    lombokVersion = '1.18.30'
    mapstructVersion = '1.5.5.Final'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    implementation 'io.github.resilience4j:resilience4j-spring-boot2:1.6.1'
    implementation 'io.github.resilience4j:resilience4j-micrometer:1.1.0'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    runtimeOnly 'com.h2database:h2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    spotbugs 'com.github.spotbugs:spotbugs:4.7.3'

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.unboundid:unboundid-ldapsdk'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.3.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.6"
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

check {
    dependsOn jacocoTestCoverageVerification
    // Ensure Checkstyle runs as part of the check lifecycle
    dependsOn tasks.named('checkstyleMain')
    dependsOn tasks.named('checkstyleTest')
}

jacoco {
    toolVersion = "0.8.10"
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

tasks.jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        // Enforce 60% overall instruction coverage
        rule {
            limit {
                minimum = 0.60
            }
        }
    }
}

checkstyle {
    toolVersion = '10.13.0'
    configDirectory = file('config/checkstyle')
}

spotbugs {
    toolVersion = '4.7.3'
    effort = 'max'
    reportLevel = 'low'
}

// Skip SpotBugs tasks as it doesn't support Java 21 yet
tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    enabled = false
}

// Conditional SpotBugs runner: run with -PenableSpotbugs=true to enable
if (project.hasProperty('enableSpotbugs') && project.property('enableSpotbugs') == 'true') {
    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        enabled = true
        reportsDir = file("${buildDir}/reports/spotbugs")
        excludeFilter = file('config/spotbugs/excludeFilter.xml')
    }
}

// Ensure tests use JUnit Platform (JUnit 5). Spring Boot's starter-test brings it transitively.

bootJar {
    enabled = true
}

jar {
    enabled = false
}
